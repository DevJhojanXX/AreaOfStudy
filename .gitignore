# Dependencias instaladas con npm
/node_modules

# Directorio de dependencias instaladas con Yarn
/yarn.lock

# Directorio de dependencias instaladas con pnpm
/pnpm-lock.yaml

# Directorio de archivos binarios generados
/bin

# Directorio de archivos generados durante la construcción
/build

# Archivos de registro
/logs

# Archivos de configuración locales
.env

# Archivos de respaldo
*.bak

# Archivos de caché
*.cache

# Archivos de registro
*.log

# Archivos de resultados de pruebas
*.test-result

# Carpeta de cobertura de código
/coverage

# Archivos de datos temporales
.tmp

# Archivos de paquetes
*.zip
*.tgz

# Dependencias opcionales que no se requieren en desarrollo
optional-dependency

# Directorio de caché de Babel
.babel-cache

# Historial de shell
.history

# Carpetas de IDE
.idea
.vscode



# Historial de shell
.history


# Compiled Java packages
*.jar
*.war
*.ear

# Maven target directory
/target/

# Gradle files
.gradle/

# Eclipse project files
.classpath
.project
.settings/

# IntelliJ project files
.idea/
*.iml

# NetBeans project files
nbproject/
build/

# Compiled Kotlin files
*.class

# Gradle files
.gradle/
build/

# IntelliJ project files
.idea/
*.iml

# Eclipse project files
.classpath
.project
.settings/

# Compiled JavaScript files
*.js
*.js.map

# TypeScript cache
*.tsbuildinfo

# Node.js dependencies
/node_modules

# Compiled TypeScript files
dist/

# Visual Studio Code directory
.vscode/

# Python
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Cython debug symbols
cython_debug/

# Virtual environment
venv/
.env
.venv/
ENV/
env.bak/
venv.bak/

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date

# .Net y sus toolings
# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# Enable "build/" folder in the NuGet Packages folder since NuGet uses it for MSBuild targets
!packages/build/

# Comment to ignore this file types in all projects
*.log
*.tlog
*.vspscc
*.vssscc
.vscode/

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates
*.userprefs

# Mono Auto Generated Files
mono_crash.*

# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# VS Code directories
.vscode/

# Visual Studio Code Workspace
*.code-workspace

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk

# JetBrains Rider
.idea/
*.sln.iml

# Rider, ReSharper & Resharper C++
_ReSharper*/
*.[Rr]e[Ss]harper
*.[Rr]e[Ss]harper.Cpp
*.DotSettings.user
.idea/

# Ignore .NET Core project model cache
project.lock.json
project.fragment.lock.json

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# User-specific files (Mono Auto Generated)
mono_crash.*

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm

# Translations
*.translation

# Windows specific
*.cache
*.wixpdb

# DotNetTool references
**/.store/
**/.stage/
**/.nuget/
**/*.nupkg

# NuGet
*.nupkg
*.snupkg
*.symbols.nupkg
.nuget/
Nukeeper.*
Nukeeper

# IDEs
.idea
.vscode

# Visual Studio
.vs
.vscode

# Rider
.idea

# Temporary files
*.tmp
*.temp

# Coverage Results
*.coverage
*.coveragexml
*.log
*.log.*
coverage*.json
coverage*.xml
coverage*.info
*.mdunittest
*.nunit.xml
TestResult.xml
TestResults

# NDepend
.ndproj
.ndrules
.ndproj.user

# Windows image file caches
Thumbs.db
ehthumbs.db

# Folder config file
Desktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msm
*.msp

# Windows shortcuts
*.lnk

# JetBrains Rider
.idea/
*.sln.iml

# Rider, ReSharper & Resharper C++
_ReSharper*/
*.[Rr]e[Ss]harper
*.[Rr]e[Ss]harper.Cpp
*.DotSettings.user
.idea/

# Ignore .NET Core project model cache
project.lock.json
project.fragment.lock.json

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# User-specific files (Mono Auto Generated)
mono_crash.*

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm

# Translations
*.translation

# Windows specific
*.cache
*.wixpdb

# DotNetTool references
**/.store/
**/.stage/
**/.nuget/
**/*.nupkg

# NuGet
*.nupkg
*.snupkg
*.symbols.nupkg
.nuget/
Nukeeper.*
Nukeeper

# IDEs
.idea
.vscode

# Visual Studio
.vs
.vscode

# Rider
.idea

# Temporary files
*.tmp
*.temp

# Coverage Results
*.coverage
*.coveragexml
*.log
*.log.*
coverage*.json
coverage*.xml
coverage*.info
*.mdunittest
*.nunit.xml
TestResult.xml
TestResults

# NDepend
.ndproj
.ndrules
.ndproj.user

# Local History
.localhistory

# Others
[Tt]est[Rr]esult*
[Bb]uild[Ll]og.*


# flutter
# Flutter/Dart/Pub related
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.packages
.pub-cache/
.pub/
build/
# If you're building an application using Fluttter -- the following might be more useful:
# `build` is generated in the root of the application, and if you were to use the `flutter test`
# you'd get a `build` directory under each `test` directory. As a result, the above may not be
# sufficient for the entire project depending on your needs. If you want to ensure `build` is 
# ignored throughout your project:
**/build/

# Uncomment this line if you want to avoid checking in source code
# generated by `flutter create` in your project.
# android/
# ios/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# VS Code related
.vscode/

# Generated by pub
pubspec.lock

# macOS related
macos/Flutter/ephemeral/

# Linux related
linux/flutter/ephemeral/

# Windows related
windows/flutter/ephemeral/

# Web related
web/.dart_tool/

# Symbolication related
app.*.symbols

# iOS related
ios/Flutter/App.framework
ios/Flutter/Flutter.framework
ios/Flutter/Generated.xcconfig

# Android Studio related
.android/
local.properties

# Obsolete references
packages.bak

# Desktop related
**/.dart_tool/
**/build/

# Flutter env
.flutter/

# App-specific
app.local.properties

#Kotlin
# Built application files
*.apk
*.aar
*.ap_
*.aab

# Files for the ART/Dalvik VM
*.dex

# Java class files
*.class

# Generated files
bin/
gen/
out/

# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Proguard folder generated by Eclipse
proguard/

# Log Files
*.log

# Android Studio Navigation editor temp files
.navigation/

# Android Studio captures folder
captures/

# IntelliJ
*.iml
.idea/
.idea/workspace.xml
.idea/tasks.xml
.idea/gradle.xml
.idea/assetWizardSettings.xml
.idea/dictionaries
.idea/libraries
.idea/caches
.idea/modules.xml

# Keystore files
# Uncomment the following lines if you do not want to check your keystore files in
#*.jks
#*.keystore

# External native build folder generated in Android Studio 2.2 and later
.externalNativeBuild
.cxx/

# Google Services (e.g. APIs or Firebase)
google-services.json

# Freeline
freeline.py
freeline/freeline_project_description.json

# fastlane
fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots
fastlane/test_output
fastlane/readme.md

# Version control
vcs.xml

# lint
lint/intermediates/lint/generated/
lint/outputs/
lint/tmp/

# MacOS
.DS_Store

# App Specific cases
/app/release/output.json
/.idea/codeStyles/


*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties